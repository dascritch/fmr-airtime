# {{ ansible_managed }}

# Configuration Liquidsoap permettant de jouer de la musique quand aucune
# émission n'est programmée.

# Liquidsoap Documentation:
# - Language: http://savonet.sourceforge.net/doc-svn/language.html
# - Reference: http://savonet.sourceforge.net/doc-svn/reference.html
#   - playlist() http://savonet.sourceforge.net/doc-svn/reference.html#playlist
#   - rotate() http://savonet.sourceforge.net/doc-svn/reference.html#rotate
#   - fallback() http://savonet.sourceforge.net/doc-svn/reference.html#fallback

############################################################
# Préparation des sonores
############################################################

# Fond musical - Joué uniquement si rien d'autre n'est disponible
# - Recharge la liste toutes les 6h (21600s) pour incorporer les nouveaux sonores
tout = playlist(reload=21600, "{{ music_path }}")

# Fond de rotation - Fond normalement diffusé
rota_forte =    playlist(reload=21600, "{{ rotation_path }}/Forte")
rota_moyenne =  playlist(reload=21600, "{{ rotation_path }}/Moyenne")
rota_lente =    playlist(reload=21600, "{{ rotation_path }}/Lente")

# FIXME: Est-ce nécessaire ?
# Programmation par genres - Style musical en fonction de l'heure
# Fichiers M3U générés automatiquement par le script playlists_creation.sh
#jazz = playlist(reload=21600, "{{ playlists_path }}/Jazz.m3u")
#rock = playlist(reload=21600, "{{ playlists_path }}/Rock.m3u")
#metal = playlist(reload=21600, "{{ playlists_path }}/Metal.m3u")
#classical = playlist(reload=21600, "{{ playlists_path }}/Classical.m3u")
#chanson = playlist(reload=21600, "{{ playlists_path }}/Chanson.m3u")
#hiphop = playlist(reload=21600, "{{ playlists_path }}/Hip-Hop.m3u")

# Jingles
# - Au moins un jingle toutes les 45m (2700s)
# - Recharge la playlist toutes les 6h (21600s)
jingles = playlist(reload=21600, "{{ jingles_path }}")
# Note: "delay" est contradictoire avec le "weights" de rotate().
jingles = delay(2700., jingles)
# Le tag "commercial" est utilisé par des scrobblers comme TuneIn.
jingles = rewrite_metadata([("commercial","true")], jingles)

# Publicités
# - Au moins une pub toutes les 15m (900s)
# - Recharge la playlist toutes les 2h (7200s)
publicites = playlist(reload=7200, "{{ publicites_path }}")
publicites = delay(900., publicites)
publicites = rewrite_metadata([("commercial","true")], publicites)

# Top horaire
# - Recharge la playlist toutes les 6h (21600s)
tophoraire = playlist(reload=21600, "{{ tophoraires_path }}")
tophoraire = rewrite_metadata([("commercial","true")], tophoraire)

{% if security_file %}
# Sécurité
# Sonore diffusé si aucun autre son n'est disponible.
security = single("/home/{{ main_user }}/{{ security_file }}")

{% endif %}
############################################################
# Arrangement
############################################################

# Fréquences de rotation
rotations = rotate(weights=[6, 3, 1], [rota_forte, rota_moyenne, rota_lente])

# FIXME: Est-ce nécessaire ?
# Programmations horaires
#genres = switch([
#                ({ 6h-12h },  random([classical, chanson]) ),
#                ({ 12h-18h }, random([rock, jazz]) ),
#                ({ 18h-24h }, random([metal]) ),
#                ({ 0h-6h },   random([hiphop]) ),
#            ])

# Ajoute les programmations si dispo, sinon se rabat sur le fond musical
# - track_sensitive=false pour ne pas rester bloqué sur la liste "tout" ad vitam æternam!
music = fallback(track_sensitive=false, [
            fallback(track_sensitive=true, [
                #genres,
                rotations,
                ]),
            tout,
        ])

# Inclusion des jingles et pubs
radio = rotate([jingles, music, publicites])
# Note: "weights" est contradictoire avec le "delay()" des playlists.
#radio = rotate(weights=[1, 6, 1], [jingles, music, publicites])

{% if security_file %}
# Sécurité : si aucune piste dispo, on se rabat aussitôt sur la piste sécurité
radio = fallback(track_sensitive=false, [radio, security])

{% endif %}
# Multiplie l'amplitude du signal
radio = amplify(1., override="replay_gain", radio)

# Normalise le signal
radio = normalize(radio)

# Ajoute le top horaire
radio = smooth_add(
            delay=0.5,
            p=0.5,
            normal=radio,
            special=switch([
                ({ 59m and 55s-59s }, delay(5., tophoraire))
            ]),
        )

############################################################
# Airtime diffuse la playlist "default" quand aucune émission n'est programmée
default = mksafe(radio)

# vim: ft=ruby
