---
######################################################################
# Airtime configuration
######################################################################

#=====================================================================
# Airtime Post-install settings
#=====================================================================

# FIXME OPUS plugin seems to prevent OGG files from being played :-(
- name: AWFULHACK Retrieve path to OPUS Liquidsoap plugin
  shell: dpkg -L liquidsoap-plugin-opus |grep opus.cmxs
  register: opus_file
  changed_when: false
  tags:
    - airtime
    - airtime_postinstall

- name: AWFULHACK Verify if OPUS Liquidsoap plugin exists
  stat: path="{{ opus_file.stdout }}" get_md5=no get_checksum=no
  register: opus
  tags:
    - airtime
    - airtime_postinstall

- name: AWFULHACK Remove OPUS Liquidsoap plugin which prevents playing OGG
  command: mv "{{ opus_file.stdout }}" "{{ opus_file.stdout }}_BAK"
  when: opus.stat.exists
  tags:
    - airtime
    - airtime_postinstall

# FIXME Temporary fix for https://github.com/sourcefabric/Airtime/pull/82
- name: Verify if airtime-liquidsoap starts too early regarding Apache (S91)
  stat: path="/etc/rc2.d/S20airtime-liquidsoap" get_md5=no get_checksum=no
  register: starts_too_early
  tags:
    - airtime
    - airtime_postinstall

- name: Set airtime-liquidsoap to start before Apache
  command: mv "/etc/rc{{ item.rc }}.d/{{ item.old }}airtime-liquidsoap" "/etc/rc{{ item.rc }}.d/{{ item.new }}airtime-liquidsoap"
  with_items:
    - { rc: "0", old: "K20", new: "K08" }
    - { rc: "1", old: "K20", new: "K08" }
    - { rc: "2", old: "S20", new: "S92" }
    - { rc: "3", old: "S20", new: "S92" }
    - { rc: "4", old: "S20", new: "S92" }
    - { rc: "5", old: "S20", new: "S92" }
    - { rc: "6", old: "K20", new: "K08" }
  when: starts_too_early.stat.exists
  tags:
    - airtime
    - airtime_postinstall

#=====================================================================
# Set Airtime configuration
#=====================================================================
# SQL queries are viewable in the source code of Airtime:
# https://github.com/sourcefabric/Airtime/blob/master/airtime_mvc/build/sql/defaultdata.sql#L20
#=====================================================================

# This step could fail if music_path has not yet been rsync'ed.
- name: Add music folder to Airtime watched folders
  command: "airtime-import --watch-add '{{ music_path }}'"
  register: watch_add
  changed_when: "'successfully' in watch_add.stdout"
  failed_when: "'not a directory' in watch_add.stdout or 'Error' in watch_add.stdout"
  tags: airtime

#---------------------------------------------------------------------
# Set output to Hardware device
#---------------------------------------------------------------------

- name: Verify Airtime output is set to a device
  command: sudo -u postgres psql --quiet --no-align --tuples-only -c "SELECT value FROM cc_stream_setting WHERE keyname = 'output_sound_device'" airtime
  register: psql_output_device
  changed_when: false
  failed_when: false
  tags:
    - airtime
    - airtime_custom

# We use DELETE;INSERT instead of UPDATE because the entry may not exists yet.
- name: Set Airtime output to a device
  command: sudo -u postgres psql --quiet --no-align --tuples-only -c "DELETE FROM cc_stream_setting WHERE keyname = 'output_sound_device' ; INSERT INTO cc_stream_setting ("keyname", "value", "type") VALUES ('output_sound_device', 'true', 'boolean');" airtime
  when: "'true' not in psql_output_device.stdout"
  tags:
    - airtime
    - airtime_custom

#---------------------------------------------------------------------
# Set output to ALSA device
#---------------------------------------------------------------------

- name: Verify Airtime output is set to ALSA
  command: sudo -u postgres psql --quiet --no-align --tuples-only -c "SELECT value FROM cc_stream_setting WHERE keyname = 'output_sound_device_type'" airtime
  register: psql_output_type
  changed_when: false
  failed_when: false
  tags:
    - airtime
    - airtime_custom

- name: Set Airtime output to ALSA
  command: sudo -u postgres psql --quiet --no-align --tuples-only -c "DELETE FROM cc_stream_setting WHERE keyname = 'output_sound_device_type' ; INSERT INTO cc_stream_setting ("keyname", "value", "type") VALUES ('output_sound_device_type', 'ALSA', 'string');" airtime
  when: "'ALSA' not in psql_output_type.stdout"
  tags:
    - airtime
    - airtime_custom

#---------------------------------------------------------------------
# Disable Stream 1
#---------------------------------------------------------------------

- name: Verify that Airtime stream 1 is disabled
  command: sudo -u postgres psql --quiet --no-align --tuples-only -c "SELECT value FROM cc_stream_setting WHERE keyname = 's1_enable'" airtime
  register: psql_stream_1
  changed_when: false
  failed_when: false
  tags:
    - airtime
    - airtime_custom

- name: Disable Airtime stream 1
  command: sudo -u postgres psql --quiet --no-align --tuples-only -c "DELETE FROM cc_stream_setting WHERE keyname = 's1_enable' ; INSERT INTO cc_stream_setting ("keyname", "value", "type") VALUES ('s1_enable', 'false', 'boolean');" airtime
  when: "'false' not in psql_stream_1.stdout"
  tags:
    - airtime
    - airtime_custom

#---------------------------------------------------------------------
# Allow Remote Websites To Access "Schedule" Info
#---------------------------------------------------------------------
# NOTE: Values of the table cc_pref are cached into APC, so we need to restart
# or reload Apache after changing them.

- name: Verify Airtime allow remote access to schedule info
  command: sudo -u postgres psql --quiet --no-align --tuples-only -c "SELECT valstr FROM cc_pref WHERE keystr = 'third_party_api'" airtime
  register: psql_allow_remote
  changed_when: false
  failed_when: false
  tags:
    - airtime
    - airtime_custom

- name: Set Airtime to allow remote access to schedule info
  command: sudo -u postgres psql --quiet --no-align --tuples-only -c "DELETE FROM cc_pref WHERE keystr = 'third_party_api' ; INSERT INTO cc_pref ("keystr", "valstr") VALUES ('third_party_api', '1');" airtime
  when: "psql_allow_remote.stdout != '1'"
  notify: Reload apache2
  tags:
    - airtime
    - airtime_custom

#---------------------------------------------------------------------
# Set Airtime radio name
#---------------------------------------------------------------------

- name: Verify Airtime has a radio name
  command: sudo -u postgres psql --quiet --no-align --tuples-only -c "SELECT valstr FROM cc_pref WHERE keystr = 'station_name'" airtime
  register: psql_radio_name
  changed_when: false
  failed_when: false
  tags:
    - airtime
    - airtime_custom

- name: Set Airtime radio name
  command: sudo -u postgres psql --quiet --no-align --tuples-only -c "DELETE FROM cc_pref WHERE keystr = 'station_name' ; INSERT INTO cc_pref ("keystr", "valstr") VALUES ('station_name', '{{ program_name }}');" airtime
  when: "psql_radio_name.stdout == ''"
  notify: Reload apache2
  tags:
    - airtime
    - airtime_custom

#---------------------------------------------------------------------
# Set Airtime first day of week to Monday
#---------------------------------------------------------------------

- name: Verify Airtime first day of week is Monday
  command: sudo -u postgres psql --quiet --no-align --tuples-only -c "SELECT valstr FROM cc_pref WHERE keystr = 'week_start_day'" airtime
  register: psql_week_first_day
  changed_when: false
  failed_when: false
  tags:
    - airtime
    - airtime_custom

- name: Set Airtime first day of week to Monday
  command: sudo -u postgres psql --quiet --no-align --tuples-only -c "DELETE FROM cc_pref WHERE keystr = 'week_start_day' ; INSERT INTO cc_pref ("keystr", "valstr") VALUES ('week_start_day', '1');" airtime
  when: "psql_week_first_day.stdout == ''"
  notify: Reload apache2
  tags:
    - airtime
    - airtime_custom

#---------------------------------------------------------------------
# TODO: Set Airtime Email settings (SMTP server, and from address)
#---------------------------------------------------------------------

#=====================================================================
# Liquidsoap customisations
#=====================================================================

- name: Create Liquidsoap scripts destination folder
  file: path="/home/{{ main_user }}/liquidsoap_scripts"
        state=directory
        mode=0775 owner="{{ main_user }}" group="{{ main_user }}"
  tags:
    - airtime
    - default_playlist
    - scrobbler

- name: Deploy Liquidsoap scripts
  template: src="{{ item }}.j2"
            dest="/home/{{ main_user }}/liquidsoap_scripts/{{ item }}"
            mode=0664 owner="{{ main_user }}" group="{{ main_user }}"
            validate="airtime-liquidsoap --check-lib %s"
  with_items:
    - "ls_{{ program_code }}.liq"
  notify: Restart airtime-liquidsoap
  tags:
    - airtime
    - default_playlist

- name: Deploy Liquidsoap scripts
  template: src="{{ item }}.j2"
            dest="/home/{{ main_user }}/liquidsoap_scripts/{{ item }}"
            mode=0664 owner="{{ main_user }}" group="{{ main_user }}"
            validate="airtime-liquidsoap --check-lib %s"
  with_items:
    - "ls_{{ program_code }}_scrobbler.liq"
  when: scrobbler_server is defined and scrobbler_server != ""
  notify: Restart airtime-liquidsoap
  tags:
    - airtime
    - scrobbler

#---------------------------------------------------------------------
# Liquidsoap: Setup the fallback default playlist
#---------------------------------------------------------------------

- name: Include our default Liquidsoap playlist script into Airtime
  lineinfile: dest=/usr/lib/airtime/pypo/bin/liquidsoap_scripts/ls_script.liq
              insertbefore="^default = amplify.*"
              line='%include "/home/{{ main_user }}/liquidsoap_scripts/ls_{{ program_code }}.liq"'
              #validate="airtime-liquidsoap --check %s"
              # Check fails: At line 3, char 30: the variable log_file used
              # here has not been previously defined.
  notify: Restart airtime-liquidsoap
  tags:
    - airtime
    - default_playlist

- name: Comment default Liquidsoap playlist into Airtime
  lineinfile: dest=/usr/lib/airtime/pypo/bin/liquidsoap_scripts/ls_script.liq
              regexp="{{ item.r }}" line="{{ item.l }}" backrefs=yes
              #validate="airtime-liquidsoap --check %s"
  with_items:
    - { r: '^(default = amplify.*)', l: '#\1' }
  notify: Restart airtime-liquidsoap
  tags:
    - airtime
    - default_playlist

#---------------------------------------------------------------------
# Liquidsoap: Setup the scrobbler
#---------------------------------------------------------------------
# Only if scrobbler_server is defined

- name: Include our scrobbler script into Airtime
  lineinfile: dest=/usr/lib/airtime/pypo/bin/liquidsoap_scripts/ls_script.liq
              insertbefore="^if output_sound_device then"
              line='{{ item }}'
              #validate="airtime-liquidsoap --check %s"
  with_items:
    - '%include "/home/{{ main_user }}/liquidsoap_scripts/ls_{{ program_code }}_scrobbler.liq"'
    #- 's = on_track(scrobble, s)'
    - 's = on_metadata(scrobble, s)'
  when: scrobbler_server is defined and scrobbler_server != ""
  notify: Restart airtime-liquidsoap
  tags:
    - airtime
    - scrobbler

# Here we simply tell LS to stop rewriting the "title" metadata to "Offline".
# Instead (because the ref_off_air_meta variable has already be defined and
# must be used...) lets rewrite something else, like the "comment" tag... :-/
- name: Stop rewriting metadata when Offline (for Scrobbler)
  lineinfile: dest=/usr/lib/airtime/pypo/bin/liquidsoap_scripts/ls_script.liq
              regexp="{{ item.r }}" line="{{ item.l }}" backrefs=yes
              #validate="airtime-liquidsoap --check %s"
  with_items:
    - { r: '^(default = rewrite_metadata.*)title(.*)',
        l: '\1comment\2' }
  when: scrobbler_server is defined and scrobbler_server != ""
  notify: Restart airtime-liquidsoap
  tags:
    - airtime
    - scrobbler

