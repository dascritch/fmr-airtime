---
# tasks file for fmr-airtime

######################################################################
# Packages
######################################################################

- name: Install packages required for our Airtime
  # Update cache if older than 1 day
  apt: name={{ item }} state=latest update_cache=yes cache_valid_time=86400
  with_items:
    - vim
    - ntp
    - mc
    - links
    - tree
    - wget
    - mudita24
    - convmv
    - cifs-utils
    - fapg
    #- festival
  tags: packages

######################################################################
# Partitions & Filesystems
######################################################################

# /tmp should be in RAM (tmpfs)
- name: Mount /tmp in RAM
  mount: name=/tmp src=tmpfs fstype=tmpfs state=mounted
  tags:
    - filesystem
    - mounts

- name: Verify the existence of our storage disk
  stat: path="{{ storage_disk }}" get_md5=no get_checksum=no
  ignore_errors: yes
  register: disk_exist
  tags:
    - filesystem
    - mounts

- name: Create LVM VG on storage disk
  lvg: vg=localdisk-vg pvs="{{ storage_disk }}"
  ignore_errors: yes
  when: disk_exist.stat.exists
  register: vg_created
  tags: filesystem

- name: Create LVM LV on storage disk
  lvol: vg=localdisk-vg lv=storage size=100%FREE
  when: disk_exist.stat.exists and vg_created|success
  tags: filesystem

- name: Create ext4 filesystem for storage
  filesystem: fstype=ext4 dev=/dev/localdisk-vg/storage force=no
  when: disk_exist.stat.exists and vg_created|success
  tags: filesystem

# If Airtime (which has already been installed at this point) has created its
# folder, we should remove it before mounting storage disk.
- name: Remove Airtime folder before mouting storage disk (if Airtime just installed)
  command: rm -rf "{{ airtime_path }}"
  when: airtime_install|changed and disk_exist.stat.exists
  failed_when: false
  changed_when: false
  tags: filesystem

# Airtime will create its folders by itself when restarted.
- name: Mount storage disk
  mount: name="{{ storage_mount }}" src=/dev/localdisk-vg/storage fstype=ext4
         state=mounted
  when: disk_exist.stat.exists
  notify: Restart airtime-media-monitor
  tags:
    - filesystem
    - mounts

- name: Create sounds library folder
  file: path="{{ library_path }}" state=directory
        mode=0775 owner="{{ main_user }}" group="{{ main_user }}"
  when: disk_exist.stat.exists
  tags: filesystem

# Copy the security sound file on the local FS
- name: Upload security sound file
  copy: src="{{ security_file }}"
        dest="/home/{{ main_user }}/{{ security_file }}"
        mode=0664 owner="{{ main_user }}" group="{{ main_user }}"
  when: security_file is defined and security_file != ""

######################################################################
# Sound files synchronisation from remote NAS
######################################################################

- name: Install Samba packages
  apt: name={{ item }} state=latest
  with_items:
    - cifs-utils
  tags:
    - packages
    - mounts

# - name: Remote NAS mount point directory creation
#   file: path="{{ nas_mount }}" state=directory
#         mode=0775 owner="{{ main_user }}" group="{{ main_user }}"
#   tags: mounts

- name: Setup the mount point of remote NAS
  mount: name="{{ nas_mount }}" src="//{{ nas_hostname }}/{{ nas_share}}" fstype=cifs
         state=mounted opts=ro,noauto,user,guest
  register: nas_mounted
  changed_when: false
  tags: mounts

- name: Unmount remote NAS now that it has been configured
  mount: name="{{ nas_mount }}" src="//{{ nas_hostname }}/{{ nas_share}}" fstype=cifs
         state=unmounted
  when: nas_mounted|changed
  changed_when: false
  tags: mounts

######################################################################
# Scripts deployment
######################################################################

- name: Scripts directory creation
  file: path="/home/{{ main_user }}/scripts" state=directory mode=0775
        mode=0775 owner="{{ main_user }}" group="{{ main_user }}"
  tags: scripts

- name: Upload scripts
  template: src={{ item }}.j2
            dest="/home/{{ main_user }}/scripts/{{ item }}"
            mode=0775 owner="{{ main_user }}" group="{{ main_user }}"
  with_items:
    - sync_nas.sh
    - playlists_creation.sh
    - backup_airtime.sh
  tags: scripts
  tags: testme

#=====================================================================
# Sound Files Sync Script
- name: Cron for sounds synchronisation script
  cron: name="Synchronisation of remote NAS"
        user="{{ main_user }}"
        minute=55
        job="/home/{{ main_user }}/scripts/sync_nas.sh"
  tags: scripts

- name: Run synchronisation right now, in background (but wait 5s to at least retrieve some files!)
  shell: sudo -u "{{ main_user }}" bash -c "(/home/{{ main_user }}/scripts/sync_nas.sh) & sleep 5"
  when: airtime_install|changed
  tags: scripts

#=====================================================================
# Playlists Creation Script
- name: Cron for M3U playlists creation script
  cron: name="Creation of playlists"
        user="{{ main_user }}"
        hour=3
        job="/home/{{ main_user }}/scripts/playlists_creation.sh"
  tags: scripts

- name: Run playlists creation right now, in background
  shell: sudo -u "{{ main_user }}" bash -c "(/home/{{ main_user }}/scripts/playlists_creation.sh) &"
  when: airtime_install|changed
  tags: scripts

#=====================================================================
# Backup script
- name: Cron for Airtime Backup script
  cron: name="Airtime backup"
        user="root"
        hour=4
        job="/home/{{ main_user }}/scripts/backup_airtime.sh"
  tags: scripts
  tags: testme

######################################################################
# Soundcards settings
######################################################################

- name: Make sure the M-Audio 24/96 ICE1712 is the first soundcard
  lineinfile: dest=/etc/modprobe.d/alsa-base.conf
              line="{{ item }}"
  with_items:
    - "# Hardcode the sort order of soundcards:"
    - "options {{ soundcard_1 }} index=0"
    - "options {{ soundcard_2 }} index=1"
  register: soundcards_order
  tags: sound

# alsa force-reload seems to always return status code 1 :-(
- name: Reload ALSA configuration
  command: alsa force-reload
  register: alsa_reload
  failed_when: "alsa_reload.rc != 1"
  when: soundcards_order|changed
  tags: sound

# Set sound volume
- name: Set ALSA volume on our ICE1712
  command: amixer -c0 set "{{ item.i }}" "{{ item.v }}" unmute
  with_items: soundcard_volume
  changed_when: false
  tags: sound

######################################################################
# Airtime specifics
######################################################################

- name: Remove unused packages
  apt: name="{{ item }}" state=absent purge=yes
  with_items:
    - pulseaudio
    - icecast2
  tags: airtime

- name: Add sounds folder to Airtime watched folders
  command: "airtime-import --watch-add '{{ music_path }}'"
  register: watch_add
  changed_when: "'successfully' in watch_add.stdout"
  failed_when: "'not a directory' in watch_add.stdout or 'Error' in watch_add.stdout"
  tags: airtime

######################################################################
# Airtime configuration
######################################################################

#=====================================================================
# Airtime Post-install settings
#=====================================================================

# FIXME OPUS plugin seems to prevent OGG files from being played :-(
- name: AWFULHACK Retrieve path to OPUS Liquidsoap plugin
  shell: dpkg -L liquidsoap-plugin-opus |grep opus.cmxs
  register: opus_file
  changed_when: false
  tags:
    - airtime
    - airtime_postinstall

- name: AWFULHACK Verify if OPUS Liquidsoap plugin exists
  stat: path="{{ opus_file.stdout }}" get_md5=no get_checksum=no
  register: opus
  tags:
    - airtime
    - airtime_postinstall

- name: AWFULHACK Remove OPUS Liquidsoap plugin which prevents playing OGG
  command: mv "{{ opus_file.stdout }}" "{{ opus_file.stdout }}_BAK"
  when: opus.stat.exists
  tags:
    - airtime
    - airtime_postinstall

# FIXME Temporary fix for https://github.com/sourcefabric/Airtime/pull/82
- name: Verify if airtime-liquidsoap starts too early regarding Apache (S91)
  stat: path="/etc/rc2.d/S20airtime-liquidsoap" get_md5=no get_checksum=no
  register: starts_too_early
  tags:
    - airtime
    - airtime_postinstall

- name: Set airtime-liquidsoap to start before Apache
  command: mv "/etc/rc{{ item.rc }}.d/{{ item.old }}airtime-liquidsoap" "/etc/rc{{ item.rc }}.d/{{ item.new }}airtime-liquidsoap"
  with_items:
    - { rc: "0", old: "K20", new: "K08" }
    - { rc: "1", old: "K20", new: "K08" }
    - { rc: "2", old: "S20", new: "S92" }
    - { rc: "3", old: "S20", new: "S92" }
    - { rc: "4", old: "S20", new: "S92" }
    - { rc: "5", old: "S20", new: "S92" }
    - { rc: "6", old: "K20", new: "K08" }
  when: starts_too_early.stat.exists
  tags:
    - airtime
    - airtime_postinstall

#=====================================================================
# Set Airtime configuration
#=====================================================================
# SQL queries are viewable in the source code of Airtime:
# https://github.com/sourcefabric/Airtime/blob/master/airtime_mvc/build/sql/defaultdata.sql#L20
#=====================================================================

#---------------------------------------------------------------------
# Set output to Hardware device
#---------------------------------------------------------------------

- name: Verify Airtime output is set to a device
  command: sudo -u postgres psql --quiet --no-align --tuples-only -c "SELECT value FROM cc_stream_setting WHERE keyname = 'output_sound_device'" airtime
  register: psql_output_device
  changed_when: false
  failed_when: false
  tags:
    - airtime
    - airtime_fmr

- name: Set Airtime output to a device
  command: sudo -u postgres psql --quiet --no-align --tuples-only -c "DELETE FROM cc_stream_setting WHERE keyname = 'output_sound_device' ; INSERT INTO cc_stream_setting ("keyname", "value", "type") VALUES ('output_sound_device', 'true', 'boolean');" airtime
  when: "'true' not in psql_output_device.stdout"
  tags:
    - airtime
    - airtime_fmr

#---------------------------------------------------------------------
# Set output to ALSA device
#---------------------------------------------------------------------

- name: Verify Airtime output is set to ALSA
  command: sudo -u postgres psql --quiet --no-align --tuples-only -c "SELECT value FROM cc_stream_setting WHERE keyname = 'output_sound_device_type'" airtime
  register: psql_output_type
  changed_when: false
  failed_when: false
  tags:
    - airtime
    - airtime_fmr

- name: Set Airtime output to ALSA
  command: sudo -u postgres psql --quiet --no-align --tuples-only -c "DELETE FROM cc_stream_setting WHERE keyname = 'output_sound_device_type' ; INSERT INTO cc_stream_setting ("keyname", "value", "type") VALUES ('output_sound_device_type', 'ALSA', 'string');" airtime
  when: "'ALSA' not in psql_output_type.stdout"
  tags:
    - airtime
    - airtime_fmr

#---------------------------------------------------------------------
# Disable Stream 1
#---------------------------------------------------------------------

- name: Verify that Airtime stream 1 is disabled
  command: sudo -u postgres psql --quiet --no-align --tuples-only -c "SELECT value FROM cc_stream_setting WHERE keyname = 's1_enable'" airtime
  register: psql_stream_1
  changed_when: false
  failed_when: false
  tags:
    - airtime
    - airtime_fmr

- name: Disable Airtime stream 1
  command: sudo -u postgres psql --quiet --no-align --tuples-only -c "DELETE FROM cc_stream_setting WHERE keyname = 's1_enable' ; INSERT INTO cc_stream_setting ("keyname", "value", "type") VALUES ('s1_enable', 'false', 'boolean');" airtime
  when: "'false' not in psql_stream_1.stdout"
  tags:
    - airtime
    - airtime_fmr

#=====================================================================
# FMR default playlist
#=====================================================================

- name: Deploy Liquidsoap script
  template: src="liquidsoap_{{ program_code }}.liq.j2"
            dest="/home/{{ main_user }}/liquidsoap_{{ program_code }}.liq"
            mode=0664 owner="{{ main_user }}" group="{{ main_user }}"
            validate="airtime-liquidsoap --check-lib %s"
  notify: Restart airtime-liquidsoap
  tags:
    - airtime
    - default_playlist

- name: Include our default Liquidsoap playlist script into Airtime
  lineinfile: dest=/usr/lib/airtime/pypo/bin/liquidsoap_scripts/ls_script.liq
              insertbefore="^default = amplify.*"
              line='%include "/home/{{ main_user }}/liquidsoap_{{ program_code }}.liq"'
              #validate="airtime-liquidsoap --check %s"
              # Check fails: At line 3, char 30: the variable log_file used
              # here has not been previously defined.
  notify: Restart airtime-liquidsoap
  tags:
    - airtime
    - default_playlist

- name: Comment default Liquidsoap playlist into Airtime
  lineinfile: dest=/usr/lib/airtime/pypo/bin/liquidsoap_scripts/ls_script.liq
              regexp="{{ item.r }}" line="{{ item.l }}" backrefs=yes
              #validate="airtime-liquidsoap --check %s"
  with_items:
    - { r: '^(default = amplify.*)', l: '#\1' }
    #- { r: '^(default = rewrite_metadata.*)', l: '#\1' }
  notify: Restart airtime-liquidsoap
  tags:
    - airtime
    - default_playlist

