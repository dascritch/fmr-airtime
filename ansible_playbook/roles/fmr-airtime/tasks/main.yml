---
######################################################################
# Packages
######################################################################

- name: Install packages required for our own Airtime
  # Update cache if older than 1 day
  apt: name={{ item }} state=latest update_cache=yes cache_valid_time=86400
  with_items:
    - vim
    - ntp
    - mc
    - links
    - tree
    - wget
    - mudita24
    - convmv
    - cifs-utils
    - fapg
    - jq
  tags: packages

######################################################################
# Partitions & Filesystems
######################################################################

# /tmp should be in RAM (tmpfs)
- name: Mount /tmp in RAM
  mount: name=/tmp src=tmpfs fstype=tmpfs state=mounted
  tags:
    - filesystem
    - mounts

- name: Verify the existence of our storage disk
  stat: path="{{ storage_disk }}" get_md5=no get_checksum=no
  ignore_errors: yes
  register: disk_exist
  tags:
    - filesystem
    - mounts

- name: Create LVM VG on storage disk
  lvg: vg=localdisk-vg pvs="{{ storage_disk }}"
  ignore_errors: yes
  when: disk_exist.stat.exists
  register: vg_created
  tags: filesystem

- name: Create LVM LV on storage disk
  lvol: vg=localdisk-vg lv=storage size=100%FREE
  when: disk_exist.stat.exists and vg_created|success
  tags: filesystem

- name: Create ext4 filesystem for storage
  filesystem: fstype=ext4 dev=/dev/localdisk-vg/storage force=no
  when: disk_exist.stat.exists and vg_created|success
  tags: filesystem

# If Airtime (which has already been installed at this point) has created its
# folder, we should remove it before mounting storage disk.
- name: Remove Airtime folder before mouting storage disk (if Airtime just installed)
  command: rm -rf "{{ airtime_path }}"
  when: airtime_install|changed and disk_exist.stat.exists
  failed_when: false
  changed_when: false
  tags: filesystem

# Airtime will create its folders by itself when restarted.
- name: Mount storage disk
  mount: name="{{ storage_mount }}" src=/dev/localdisk-vg/storage fstype=ext4
         state=mounted
  when: disk_exist.stat.exists
  notify: Restart airtime-media-monitor
  tags:
    - filesystem
    - mounts

- name: Create sounds library folder
  file: path="{{ library_path }}" state=directory
        mode=0775 owner="{{ main_user }}" group="{{ main_user }}"
  tags: filesystem

# Copy the security music file on the local FS
- name: Upload security music file
  copy: src="{{ security_file }}"
        dest="/home/{{ main_user }}/{{ security_file }}"
        mode=0664 owner="{{ main_user }}" group="{{ main_user }}"
  when: security_file is defined and security_file != ""
  tags:
    - filesystem
    - music

######################################################################
# Remote NAS mounts setup
######################################################################
# Basicaly, mounts are only mounted and unmounted when necessary.
# To create their mount points could be tricky, because when they are mounted they
# are owned by the user, but by root when unmounted. To workaround this, leave
# Ansible action "mount: state=mounted" take care of it. And because the
# "unmounted" action could fail if the mount point were currently used, set it
# as never failing.

- name: Install Samba packages
  apt: name={{ item }} state=latest
  with_items:
    - cifs-utils
  tags:
    - packages
    - mounts

#=====================================================================
# Music NAS
#=====================================================================
# Must be mountable and writable by main_user

# TODO: Replace guest auth by a login configured on the NAS.
- name: Setup the music NAS mount point
  mount: name="{{ nas_music_mount }}" src="//{{ nas_music_hostname }}/{{ nas_music_share}}"
         fstype=cifs opts=rw,noauto,user,guest
         state=mounted
  changed_when: false
  tags:
    - mounts
    - music

- name: Unmount music NAS, now that it has been configured
  mount: name="{{ nas_music_mount }}" src="//{{ nas_music_hostname }}/{{ nas_music_share}}"
         fstype=cifs opts=ro,noauto,user,guest
         state=unmounted
  changed_when: false
  failed_when: false
  tags:
    - mounts
    - music

#=====================================================================
# Backup NAS
#=====================================================================

# TODO: Replace guest auth by a login configured on the NAS.
- name: Mount the backup NAS
  mount: name="{{ nas_backup_mount }}" src="//{{ nas_backup_hostname }}/{{ nas_backup_share}}"
         fstype=cifs opts=rw,noauto,guest
         state=mounted
  changed_when: false
  tags:
    - mounts
    - backup

- name: Unmount backup NAS, now that it has been configured
  mount: name="{{ nas_backup_mount }}" src="//{{ nas_backup_hostname }}/{{ nas_backup_share}}"
         fstype=cifs opts=rw,noauto,guest
         state=unmounted
  changed_when: false
  failed_when: false
  tags:
    - mounts
    - backup

######################################################################
# Scripts deployment
######################################################################

- name: Scripts directory creation
  file: path="/home/{{ main_user }}/scripts" state=directory
        mode=0775 owner="{{ main_user }}" group="{{ main_user }}"
  tags: scripts

- name: Upload scripts
  template: src={{ item }}.j2
            dest="/home/{{ main_user }}/scripts/{{ item }}"
            mode=0775 owner="{{ main_user }}" group="{{ main_user }}"
  with_items:
    - sync_nas.sh
    - playlists_creation.sh
    - backup_airtime.sh
  tags:
    - scripts
    - music
    - backup

######################################################################
# Crontabs
######################################################################

# Music files sync script
- name: Cron for sounds synchronisation script
  cron: name="Synchronisation of remote NAS"
        user="{{ main_user }}"
        hour="*" minute="55"
        job="/home/{{ main_user }}/scripts/sync_nas.sh"
  tags:
    - crontab
    - scripts
    - music

# Playlists creation script
- name: Cron for M3U playlists creation script
  cron: name="Creation of playlists"
        user="{{ main_user }}"
        hour="3" minute="0"
        job="/home/{{ main_user }}/scripts/playlists_creation.sh"
  tags:
    - crontab
    - scripts
    - music

# Backup script
- name: Cron for Airtime Backup script
  cron: name="Airtime backup"
        user="root"
        hour="4" minute="0"
        job="/home/{{ main_user }}/scripts/backup_airtime.sh"
  tags:
    - crontab
    - scripts
    - backup

######################################################################
# Pre-run scripts
######################################################################

- name: Run synchronisation right now, in background (but wait 5s to at least retrieve some files!)
  shell: sudo -u "{{ main_user }}" bash -c "(/home/{{ main_user }}/scripts/sync_nas.sh) & sleep 5"
  when: airtime_install is defined and airtime_install|changed
  tags:
    - scripts
    - music

- name: Run playlists creation right now, in background
  shell: sudo -u "{{ main_user }}" bash -c "(/home/{{ main_user }}/scripts/playlists_creation.sh) &"
  when: airtime_install is defined and airtime_install|changed
  tags:
    - scripts
    - music

######################################################################
# Airtime specifics
######################################################################

- name: Remove unused packages
  apt: name="{{ item }}" state=absent purge=yes
  with_items:
    - pulseaudio
    - icecast2
  tags: airtime

######################################################################

- include: soundcards.yml
- include: airtime_configuration.yml
- include: restore_backup.yml

